Getting Started
===============

Now you have PAWS installed in your system we need to get inital files 
from `WS repo <https://github.com/rhpit/ws.git>`_ to perform paws actions. 
Each action will be covered with more detail along this documentation.

.. attention::
	Git is needed in your system to download paws files.
	it is not installed by PAWS, you can check if you have git in your system
	by running:
	::

	$ git --version

	if git is not in your system you can run the commands below:
	::

		# Yum package manager
		$ sudo yum install -y git

		# Dnf package manager
		$ sudo dnf install -y git

Paws Files
----------

PAWS files are to help get you started with paws and can be modified to 
meet your needs. You can save PAWS WS files in any convenient location in 
your system and use **-ud** parameter while running PAWS to load your files from
any path. By default we recommend saving these files at your /home/$USER/ws

PAWS default user directory **/home/$USER/ws**

.. code:: bash

	$ cd ~ 
	$ mkdir ws
	$ git clone https://github.com/rhpit/ws.git ws 

.. important::
	We strongly recommend that you visit the following page
	`paws files <files.html>`_. This page will go into detail
	about each key and their values.

How To Run
----------

Paws interface is very simple and easy to use open a terminal and run the
following command:

.. code:: bash

	$ paws

It will display the help menu (by default) showing available paws tasks. Each
task contains their own set of arguments. You can view them by passing the
help argument to any task.

.. code:: bash

	# Replace task with one of the available commands
	$ paws task -h

Paws also has bash completion, so you can [tab][tab] your way through the
interface.

.. code:: bash

   $ paws -- [tab][tab]
   --help   --userdir   --verbose   --version
   $ paws --verbose [tab][tab]
   group    provision    show    teardown    winsetup
   $ paws --verbose provision -- [tab][tab]
   --credentials    --help    --topology

Now that you have seen how to use paws interface, lets dive into running each
available task.

.. note::
	For each task below we will be using the default values for their arguments.

Provision
^^^^^^^^^

Provision task will provision system resource(s) in the provider(s) supplied
by your paws files.

Details about credentials keys/values can be found here:
`credentials.yaml <files.html#credentials-yaml>`_.

Next edit or create **/home/$USER/ws/resources.yaml** which contains the 
system resource you want to provision.

.. code:: yaml

   resources:
      - name: windows_2012
        count: 1
        image: win-2012-r2
        flavor: 4
        network: 192.168.1.0/22
        keypair: my_key_pair
        ssh_private_key: /home/user/.ssh/id_rsa
        administrator_password: my_password@2016

More details about resources keys/values can be found here:
`resources.yaml <files.html#resources-yaml>`_.

Now that your files are set. Call paws to provision your system resource.

.. code:: bash

	$ paws provision

That is it, paws will take it from here to create the instance in your provider
and prepare your Windows system ready for you to use.

.. note::
	More details about provision task can be found here:
	`provision task <tasks.html#provision>`_.

----

Teardown
^^^^^^^^

Teardown task will teardown a system resource in your provider and this task
requires **credentials.yaml** and **resources.yaml** files. 

These files tell teardown which provider to connect too and which system
resources to delete.

Now that your files are set. Call paws to teardown your system resource.

.. code:: bash

	$ paws teardown

That is it, paws will take it from here to delete the instance in your provider.

.. note::
	More details about teardown task can be found here:
	`teardown task <tasks.html#teardown>`_.

----

Winsetup
^^^^^^^^

Winsetup task will configure services on a Windows system by running a
Windows PowerShell script. Winsetup needs files generated by paws provision
task.

At top of this page you saw how to clone https://github.com/rhpit/ws repo
that contains some samples of powershell and scripts you can use here.

Following the standard scripts files can be found at 
**/home/$USER/ws/powershell**.

Now that you have your PowerShell script you are ready to configure your Windows
system. Call paws to configure your system resource.

.. code:: bash

	$ paws winsetup -ps powershell/get_system_info.ps1

That is it, paws will take it from here to run your PowerShell script on your
Windows system. In the console output you will see all messages from your
PowerShell script.

.. note::
	More details about winsetup task can be found here:
	`winsetup task <tasks.html#winsetup>`_.

----

Group
^^^^^

Group task will run multiple paws commands as one command. A group is a YAML
file which defines a list of paws tasks to run.

Following the standard group files can be found at **/home/$USER/ws/group**.

First edit or create a group file which will define a list of tasks you want
to run. 

Now that you have your group file you are ready to execute all tasks you have
defined. Call paws to execute your group file.

.. code:: bash

	$ paws group -n group/2012_winad.yaml

That is it, paws will take it from here to run your group. The group we passed
to paws was **2012_winad.yaml**. This group will provision a Windows system and
configure it as an Active Directory Server. To setup this configuration it
would require lots of paws commands to be run and by using a group it allows
you to simply run one paws command.

.. note::
	More details about group task can be found here:
	`group task <tasks.html#group>`_.

----

Show
^^^^

Show task will display system resources in your supplied provider. It assumes
the `provision <getting_started.html#provision>`_ task was called and systems
were successfully provisioned. If no systems were provisioned by it, a warning
message will be displayed.

Show will require files from
`provision <getting_started.html#provision>`_ task in order to work.

To view system resources that may have been provisioned, just call paws to see.

.. code:: bash

	$ paws show

That is it, paws will take it from here to display any system resources that
may still be active in your provider.

.. note::
	More details about show task can be found here:
	`show task <tasks.html#show>`_.
