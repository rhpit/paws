#!/bin/bash

#
# Purpose:
# ----------
# To provide a simplified way to easily test paws on its supported platforms
# (vms, containers) for its operating systems matrix.
#
# Requirements
# ------------
# The following python packages are needed:
#   - ansible
#   - docker
#   - docker-py *
#
# * You may need to install this package at the system level if running in a
# virtual environment.
#
# How to run
# ----------
#   1. Fill in the playbooks/vars.yml file with the required variables.
#       - $ vi playbooks/vars.yml
#   2. Source test_paws.sh script to load functions into memory.
#       - $ source test_paws.sh
#   3. Install two required paws roles
#       - $ ansible-galaxy install rywillia.paws-install
#       - $ ansible-galaxy install rywillia.paws-run
#   4. Edit the tests ansible.cfg to point to the location where your ansible
#      roles are stored.
#       - $ vi tests/ansible.cfg
#   5. Call the test function you would like to run.
#       - $ tc_05
#
# Test cases:
#
#  1. Paws install by pip on supported vm operating systems.
#  2. Paws install by rpm on supported vm operating systems.
#  3. Paws install by pip on supported docker containers.
#  4. Paws install by rpm on supported docker containers.
#  5. Paws install by pip on vm and test all paws tasks.
#  6. Paws install by rpm on vm and test all paws tasks.
#  7. Paws install by pip on docker container and test all paws tasks.
#  8. Paws install by rpm on docker container and test all paws tasks.
#

# TODO: Fix test cases for installing paws by rpm

# inventory generated by playbooks
INVENTORY='playbooks/paws_inventory'

delete_containers() {
    # delete docker containers

    ansible-playbook playbooks/delete_containers.yml
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while deleting containers."
        return $rc
    fi
}

create_containers() {
    # create docker containers

    ansible-playbook playbooks/create_containers.yml
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while creating containers."
        return $rc
    fi
}

delete_vms() {
    # delete virtual machines

    ansible-playbook playbooks/delete_vms.yml
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while deleting virtual machines."
        return $rc
    fi
}

create_vms() {
    # create virtual machines

    ansible-playbook playbooks/create_vms.yml
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failre occurred while creating virtual machines."
        return $rc
    fi
}

install_paws_pip() {
    # install paws package by pip

    ansible-playbook playbooks/install_paws.yml -i $INVENTORY
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while installing paws."
        return $rc
    fi

}

install_paws_rpm() {
    # install paws package by rpm

    ansible-playbook playbooks/install_paws.yml \
    -e "install_type=rpm" -i $INVENTORY
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while installing paws."
        return $rc
    fi

}

configure_paws() {
    # configure paws files

    ansible-playbook playbooks/configure_paws.yml -i $INVENTORY
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while configuring paws files."
        return $rc
    fi
}

run_paws_provision_task() {
    # run paws provision task

    ansible-playbook playbooks/run_paws.yml -e "task=provision" -i $INVENTORY
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while running paws provision task."
        return $rc
    fi

}

run_paws_teardown_task() {
    # run paws teardown task

    ansible-playbook playbooks/run_paws.yml -e "task=teardown" -i $INVENTORY
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while running paws teardown task."
        return $rc
    fi

}

run_paws_winsetup_task() {
    # run paws winsetup task

    ansible-playbook playbooks/run_paws.yml -e "task=winsetup" -i $INVENTORY
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while running paws winsetup task."
        return $rc
    fi

}

run_paws_show_task() {
    # run paws show task

    ansible-playbook playbooks/run_paws.yml -e "task=show" -i $INVENTORY
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while running paws show task."
        return $rc
    fi

}

run_paws_group_task() {
    # run paws group task

    ansible-playbook playbooks/run_paws.yml -e "task=group" -i $INVENTORY
    rc=$?
    if [ $rc != 0 ];
    then
        echo "Failure occurred while running paws group task."
        return $rc
    fi

}

test_runner() {
    # test runner
    FUNCTIONS=("$@")

    for f in ${FUNCTIONS[@]};
    do
        $f
        rc_01=$?
        if [ $rc_01 != 0 ];
        then
            # ensure proper clean up of virtual machines
            ${FUNCTIONS[-1]}
            return $rc_01
        fi
    done
}

tc_01() {
    # functions
    func=(create_vms install_paws_pip delete_vms)

    echo "Testing paws installation by pip on vms."

    # run functions
    test_runner "${func[@]}"
}

tc_02() {
    # functions
    func=(create_vms install_paws_rpm delete_vms)

    echo "Testing paws installation by rpm on vms."

    # run functions
    test_runner "${func[@]}"
}

tc_03() {
    # functions
    func=(create_containers install_paws_pip delete_containers)

    echo "Testing paws installation by pip on docker containers."

    # run functions
    test_runner "${func[@]}"
}

tc_04() {
    # functions
    func=(create_containers install_paws_rpm delete_containers)

    echo "Testing paws installation by rpm on docker containers."

    # run functions
    test_runner "${func[@]}"
}

tc_05() {
    # functions
    func=(
        create_vms
        install_paws_pip
        configure_paws
        run_paws_group_task
        delete_vms
    )

    echo "Testing paws install by pip and run paws tasks on vms."

    # run functions
    test_runner "${func[@]}"
}

tc_06() {
    # functions
    func=(
        create_vms
        install_paws_rpm
        configure_paws
        run_paws_group_task
        delete_vms
    )

    echo "Testing paws install by rpm and run paws tasks on vms."

    # run functions
    test_runner "${func[@]}"
}

tc_07() {
    # functions
    func=(
        create_containers
        install_paws_pip
        configure_paws
        run_paws_group_task
        delete_containers
    )

    echo "Testing paws install by pip and run paws tasks on docker containers."

    # run functions
    test_runner "${func[@]}"
}

tc_08() {
    # functions
    func=(
        create_containers
        install_paws_rpm
        configure_paws
        run_paws_group_task
        delete_containers
    )

    echo "Testing paws install by rpm and run paws tasks on docker containers."

    # run functions
    test_runner "${func[@]}"
}

main() {
    # main function to run all test cases
    TEST_CASES=(
        tc_01
        tc_02
        tc_03
        tc_04
        tc_05
        tc_06
        tc_07
        tc_08
    )

    # run functions
    test_runner "${TEST_CASES[@]}"
}
