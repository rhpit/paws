---
- name: Create paws virtual machine test clients
  hosts: localhost

  tasks:
    - name: Load variables from file
      include_vars:
        file: vars.yml

    - name: Create vm(s)
      os_server:
        state: present
        auth:
          auth_url: "{{ os_auth_url }}"
          username: "{{ os_username }}"
          password: "{{ os_password }}"
          project_name: "{{ os_project_name }}"
        name: "{{ item.name }}"
        image: "{{ item.image }}"
        key_name: "{{ key_pair }}"
        timeout: 300
        flavor: 3
        auto_ip: yes
        wait: yes
        meta:
          hostname: "{{ item.name }}"
          ansible_user: "{{ item.user }}"
      register: systems
      with_items:
        - "{{ vms }}"

    - name: Add host entries
      add_host:
        name: "{{ item.openstack.accessIPv4 }}"
        group: vms
        ansible_user: "{{ item.openstack.metadata.ansible_user }}"
        ansible_ssh_private_key_file: "{{ ssh_private_key_file }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items:
        - "{{ systems.results }}"

    - name: Remove inventory if exists
      file:
        path: paws_inventory
        state: absent

    - name: Create inventory
      shell:
        cmd: |
          cat >> paws_inventory <<EOF
          [{{ item.openstack.accessIPv4 }}]
          {{ item.openstack.accessIPv4 }}
          [{{ item.openstack.accessIPv4 }}:vars]
          ansible_user={{ item.openstack.metadata.ansible_user }}
          ansible_ssh_private_key_file={{ ssh_private_key_file }}
          ansible_ssh_common_args="-o StrictHostKeyChecking=no"
          EOF
      with_items:
        - "{{ systems.results }}"

    - name: Create all section
      shell: echo "[all]" >> paws_inventory

    - name: Add vms to all section
      shell:
        cmd: |
          cat >> paws_inventory <<EOF
          {{ item.openstack.accessIPv4 }}
          EOF
      with_items:
        - "{{ systems.results }}"

- name: Install packages required for Ansible communication
  hosts: vms
  gather_facts: no

  vars:
    become: True

  tasks:
    - name: Wait for SSH connection to be established
      local_action:
        module: wait_for
        host: "{{ inventory_hostname }}"
        port: 22
        timeout: 600

    - name: Whoami
      raw: whoami
      register: user

    - name: Determine if user should not become root
      set_fact:
        become=False
      when: "user.stdout.strip() == 'root'"

    - name: Check if python 2 is installed
      raw: rpm -qa python
      register: pkg_check

    - name: Install python 2
      raw: yum install -y python
      become: "{{ become }}"
      when: item.stdout == ''
      with_items:
        - "{{ pkg_check }}"
