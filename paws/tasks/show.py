#
# paws -- provision automated windows and services
# Copyright (C) 2016 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""Show module will retrieve instances info (via Ansible) against the
provider in user and based on machines pre-defined within a YAML file and
resulting at message displayed at console output.
"""

from os.path import join
from ansible.errors import AnsibleRuntimeError

from paws.constants import GET_OPS_FACTS_YAML
from paws.exceptions import NovaPasswordError, ShowError, SSHError
from paws.providers import Provider
from paws.tasks import Tasks
from paws.util import cleanup, log_resources
from paws.util.decorators import handle_pre_tasks


class Show(Tasks):
    """Show."""

    def __init__(self, args):
        """Constructor.

        :param args: Argparse arguments
        :type arg: class argparse.Namespace
        """
        super(Show, self).__init__(args)
        self.credential_file = join(self.userdir, args.credentials)
        self.getfacts_playbook = join(args.userdir, GET_OPS_FACTS_YAML)
        self.provider = Provider(self)

    @handle_pre_tasks
    def pre_tasks(self):
        """Perform any necessary pre task actions."""
        # Clean files generated by paws
        for provider_name in self.provider.provider_list:
            inst = self.provider.get_instance(provider_name)
            garbage = inst.garbage_collector()
            garbage.append(self.resources_paws)
            garbage.append(self.getfacts_playbook)
            cleanup(garbage, self.userdir)

    def run(self):
        """Show task is a informative command for end-user. When show is
        invoked by paws command line it will read the resources.json from
        userdir, generate the get_facts ansible playbook and execute the
        ansible call against the provider retreiving all info about the
        system resources that match from resources.json and provider. The
        result will be the update of resources.paws and a message displayed
        to user console with resource information.
        """
        try:
            self.logger.info("START: %s", self.__class__.__name__)

            # Save start time
            self.start()

            # Run provider action
            self.provider.run_action(self.__class__.__name__.lower())

            # Log system resources details to console
            log_resources(self.resources_paws, "show")

            # Perform post tasks for Show module
            self.post_tasks()
        except SystemExit:
            raise SystemExit(1)
        except (AnsibleRuntimeError, NovaPasswordError, SSHError):
            raise ShowError
        except KeyboardInterrupt:
            self.logger.warning("CTRL+C detected, interrupting execution")
            raise ShowError

    def post_tasks(self):
        """Perform any necessary post task actions."""
        # Save end time
        self.end()

        self.logger.info("END: Show, TIME: %dh:%dm:%ds",
                         self.hours, self.minutes, self.seconds)
        return True
