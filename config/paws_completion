# Bash completion file for paws
#
# Completions supported:
#   - paws options
#   - paws commands and their options
#
# Paws completions will automatically be enabled when paws is installed.
# This file will reside at /usr/share/bash-completions/completions/
# You can also enable it manually by one of the following options:
#   - Source the file
#     - $ source paws_completion
#   - Copy to your home directory and add to your .bashrc
#     - source ~/paws_completion
#

_paws() {
	# Paws bash auto completion

	# Local variable to store current cursor position
	local cur

	# Array to store possible completions
	COMPREPLY=()

	# Get the current cursor position from the command line
	cur=${COMP_WORDS[COMP_CWORD]}

	# Paws task commands
	commands="provision teardown show group winsetup"
	commandsarray=($commands)

	# Generic paws options used by all tasks
	common_short_opts="-ud -v -h provision"
	common_long_opts="--userdir --verbose --help --version"
	common_opts_array=($common_short_opts $common_long_opts)

	# Provision options
	provision_short_opts="-c -t -h"
	provision_long_opts="--credentials --topology --help"

	# Teardown options
	teardown_short_opts="-c -t -h"
	teardown_long_opts="--credentials --topology --help"

	# Show options
	show_short_opts="-c -t -h"
	show_long_opts="--credentials --topology --help"

	# Group options
	group_short_opts="-n -h"
	group_long_opts="--name --help"

	# Winsetup options
	winsetup_short_opts="-t -ps -psv -s -h"
	winsetup_long_opts="--topology --powershell --powershell_vars --system --help"

	# Flag to control when to display completion for command options
	flag=False

	# Determine if paws command was given
	for item in ${commandsarray[@]}; do
		if [[ "${COMP_WORDS[@]}" =~ "$item" ]]; then
			flag=True
			command=${item}
		fi
	done

	if [ "${flag}" == True ]; then
		# This code will be run assuming a paws command was given
		# It will then display the commands options
		# $ paws <option> <command>

		# Map command to their options
		if [ "${command}" == "${commandsarray[0]}" ]; then
			# Provision
			short_opts=${provision_short_opts}
			long_opts=${provision_long_opts}
		elif [ "${command}" == "${commandsarray[1]}" ]; then
			# Teardown
			short_opts=${teardown_short_opts}
			long_opts=${teardown_long_opts}
		elif [ "${command}" == "${commandsarray[2]}" ]; then
			# Show
			short_opts=${show_short_opts}
			long_opts=${show_long_opts}
		elif [ "${command}" == "${commandsarray[3]}" ]; then
			# Group
			short_opts=${group_short_opts}
			long_opts=${group_long_opts}
		elif [ "${command}" == "${commandsarray[4]}" ]; then
			# Winsetup
			short_opts=${winsetup_short_opts}
			long_opts=${winsetup_long_opts}
		fi

		# Decide which possible completions should be given
		case "${cur}" in
			--*)
				COMPREPLY=($(compgen -W "${long_opts}" \
					-- ${cur}))
			;;
			-*)
				COMPREPLY=($(compgen -W "${short_opts}" \
					-- ${cur}))
			;;
		esac
	else
		# This code will run initially when giving [tab][tab] to paws
		# It will then display options or commands
		# $ paws

		# Decide which possible completions should be given
		case "${cur}" in
			--*)
				COMPREPLY=($(compgen -W "${common_long_opts}" -- ${cur}))
			;;
			-*)
				COMPREPLY=($(compgen -W "${common_short_opts}" -- ${cur}))
			;;
			*)
				COMPREPLY=($(compgen -W "${commands}" -- ${cur}))
			;;
		esac
	fi

	return 0
}

# Apply the completions
complete -o default -F _paws paws
